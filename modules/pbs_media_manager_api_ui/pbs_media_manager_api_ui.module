<?php

/**
 * @file
 * Provides testing form and related hooks.
 */

define('PBS_MEDIA_MANAGER_API_UI_TEST_URL',
  'admin/config/media/pbs_media_manager/pbs_media_manager_api_ui');

/**
 * Implements hook_permission().
 */
function pbs_media_manager_api_ui_permission() {
  $permissions = array();
  
  $permissions['pbs_media_manager_api_ui'] = array(
    'title' => t('Run API tests'),
    'description' => t('Allow user to run random queries against.'),
  );
  return $permissions;
}

/**
 * Implements hook_menu().
 */
function pbs_media_manager_api_ui_menu() {
  $items = array();
  
  $items['admin/config/media/pbs_media_manager/default'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  
  $items[PBS_MEDIA_MANAGER_API_UI_TEST_URL] = array(
    'title' => 'Test API Request/Response',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pbs_media_manager_api_ui_tests_form'),
    'access arguments' => array('pbs_media_manager_api_ui'),
    'type' => MENU_LOCAL_TASK,
  );
  
  return $items;
}

/**
 * Implements hook_form().
 *
 * Provides the testing form to assemble requests.
 */
function pbs_media_manager_api_ui_tests_form(array $form, array &$form_state) {
  
  $formats = array(
    'table' => t('Data Explorer'),
    'simple' => t('Simple'),
  );
  if (function_exists('dpm')) {
    $formats['dpm'] = 'dpm()';
  }
  $form['response_format'] = array(
    '#type' => 'select',
    '#title' => t('Response Format'),
    '#options' => $formats,
    '#default' => 'table',
  );
  
  $path = current_path();
  $passed_value = str_replace(PBS_MEDIA_MANAGER_API_UI_TEST_URL, '', $path);
  
  $form['simple_search'] = array(
    '#type' => 'container',
    'link_field' => array(
      '#type' => 'textfield',
      '#title' => t('API Path'),
      '#description' => t('Provide the path for the request you want to run.'),
      '#attributes' => array(
        'placeholder' => t('e.g. /assets/21980fe0-f12a-4ce8-8ba9-b997cf3a5ffd/'),
      ),
      '#default_value' => $passed_value,
    ),
    'link_button' => array(
      '#type' => 'button',
      '#ajax' => array(
        'callback' => 'pbs_media_manager_api_ui_settings_form_path_callback',
        'wrapper' => 'box',
        'name' => 'submit2',
      ),
      '#value' => t('Make Request'),
    ),
  );
  
  $form['resource'] = array(
    '#type' => 'select',
    '#title' => t('Resource'),
    '#options' => array(
      'franchise' => t('Franchises'),
      'show' => t('Shows'),
      'season' => t('Seasons'),
      'collection' => t('Collections'),
      'episode' => t('Episodes'),
      'special' => t('Specials'),
      'asset' => t('Assets'),
      'asset_legacy' => t('Assets (Legacy)'),
    ),
    '#ajax' => array(
      'callback' => 'pbs_media_manager_api_ui_resource_select_change_ajax_callback',
      'event' => 'change',
      'wrapper' => 'parentResource-replace',
    ),
    '#description' => t('Select the main resource to retrieve'),
  );
  
  $form['parentResource'] = array(
    '#type' => 'select',
    '#title' => t('Parent Resource'),
    '#prefix' => '<div id="parentResource-replace">',
    '#suffix' => '</div>',
    '#options' => array(
      'none' => t('None'),
      'franchise' => t('Franchises'),
      'show' => t('Shows'),
      'season' => t('Seasons'),
      'collection' => t('Collections'),
      'episode' => t('Episodes'),
      'special' => t('Specials'),
      'asset' => t('Assets'),
    ),
    '#description' => t('Select the parent resource to filter the main resource by.'),
    '#states' => array(
      'visible' => array(
        ':input[name="resource"]' => array(
          array('value' => 'asset'),
          array('value' => 'collection'),
          array('value' => 'season'),
          array('value' => 'episode'),
          array('value' => 'special'),
        ),
      ),
      'enabled' => array(
        ':input[name="resource"]' => array(
          array('value' => 'asset'),
          array('value' => 'collection'),
          array('value' => 'season'),
          array('value' => 'episode'),
          array('value' => 'special'),
        ),
      ),
    ),
  );
  
  $form['legacyID'] = array(
    '#type' => 'textfield',
    '#title' => 'Legacy TP Media ID',
    '#description' => t('Show the assets that use the legacy TP Media Object ID'),
    '#states' => array(
      'visible' => array(
        ':input[name="resource"]' => array(
          array('value' => 'asset_legacy'),
        ),
      ),
      'enabled' => array(
        ':input[name="resource"]' => array(
          array('value' => 'asset_legacy'),
        ),
      ),
    ),
  
  );
  
  // Some methods accept an ID or Slug as an endpoint argument.
  $form['id_or_slug'] = array(
    '#type' => 'textfield',
    '#title' => t('ID or Slug'),
    '#description' => t('Some methods accept an ID or Slug to return a single result.'),
    '#states' => array(
      'visible' => array(
        ':input[name="resource"]' => array(
          array('value' => 'asset'),
          array('value' => 'franchise'),
          array('value' => 'collection'),
          array('value' => 'season'),
          array('value' => 'show'),
          array('value' => 'episode'),
          array('value' => 'special'),
        ),
      ),
      'enabled' => array(
        ':input[name="resource"]' => array(
          array('value' => 'asset'),
          array('value' => 'show'),
          array('value' => 'franchise'),
          array('value' => 'collection'),
          array('value' => 'season'),
          array('value' => 'episode'),
          array('value' => 'special'),
        ),
      ),
      'required' => array(
        array(
          array(
            ':input[name="parentResource"]' => array(
              array('value' => 'none'),
              array('visible' => TRUE),
            ),
          ),
          'or',
          array(
            ':input[name="resource"]' => array(
              array('value' => 'asset'),
              array('value' => 'show'),
              array('value' => 'collection'),
              array('value' => 'season'),
              array('value' => 'episode'),
              array('value' => 'special'),
            ),
          ),
        ),
      ),
    ),
  );
  
  // Show only the parameters that make sense with the method.
  $form['parameters'] = array(
    '#type' => 'fieldset',
    '#title' => t('Filters'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['parameters']['audience_scope'] = array(
    '#type' => 'select',
    '#options' => array(
      '' => t('-None-'),
      'national' => t('National'),
      'local' => t('Local'),
      'kids' => t('Kids'),
    ),
    '#title' => t('Audience Scope'),
    '#description' => t('Filter by audience scope'),
    '#states' => array(
      'visible' => array(
        ':input[name="resource"]' => array('value' => 'show'),
      ),
      'enabled' => array(
        ':input[name="resource"]' => array('value' => 'show'),
      ),
    ),
  );
  $form['parameters']['audience'] = array(
    '#type' => 'textfield',
    '#title' => t('Audience'),
    '#description' => t('The station call sign. Required if Audience Scope is Local.'),
    '#states' => array(
      'visible' => array(
        ':input[name="resource"]' => array('value' => 'show'),
        ':input[name="audience_scope"]' => array('value' => 'local'),
      ),
      'enabled' => array(
        ':input[name="resource"]' => array('value' => 'show'),
        ':input[name="audience_scope"]' => array('value' => 'local'),
      ),
      'required' => array(
        ':input[name="audience_scope"]' => array('value' => 'local'),
      ),
    ),
  );
  $form['parameters']['slug'] = array(
    '#type' => 'textfield',
    '#title' => t('Slug'),
    '#description' => t('Show the resources that match the slug.'),
    '#states' => array(
      'visible' => array(
        ':input[name="resource"]' => array(
          'value' => 'show',
          'value' => 'franchise',
        ),
      ),
      'enabled' => array(
        ':input[name="resource"]' => array(
          'value' => 'show',
          'value' => 'franchise',
        ),
      ),
    ),
  );
  $form['parameters']['franchise-slug'] = array(
    '#type' => 'textfield',
    '#title' => t('Franchise Slug'),
    '#description' => t('Show the resources whose franchises match the slug.'),
    '#states' => array(
      'visible' => array(
        ':input[name="resource"]' => array('value' => 'show'),
      ),
      'enabled' => array(
        ':input[name="resource"]' => array('value' => 'show'),
      ),
    ),
  );
  $form['parameters']['franchise-id'] = array(
    '#type' => 'textfield',
    '#title' => t('Franchise ID'),
    '#description' => t('Show the resources whose franchises match the ID.'),
    '#states' => array(
      'visible' => array(
        ':input[name="resource"]' => array('value' => 'show'),
      ),
      'enabled' => array(
        ':input[name="resource"]' => array('value' => 'show'),
      ),
    ),
  );
  $form['parameters']['genre-id'] = array(
    '#type' => 'textfield',
    '#title' => t('Genre ID'),
    '#description' => t('Show the resources that have this genre ID.'),
    '#states' => array(
      'visible' => array(
        ':input[name="resource"]' => array('value' => 'show'),
      ),
      'enabled' => array(
        ':input[name="resource"]' => array('value' => 'show'),
      ),
    ),
  );
  $form['parameters']['genre-slug'] = array(
    '#type' => 'textfield',
    '#title' => t('Genre Slug'),
    '#description' => t('Show the resources that have this genre slug.'),
    '#states' => array(
      'visible' => array(
        ':input[name="resource"]' => array('value' => 'show'),
      ),
      'enabled' => array(
        ':input[name="resource"]' => array('value' => 'show'),
      ),
    ),
  );
  $form['parameters']['page'] = array(
    '#type' => 'textfield',
    '#title' => t('Page'),
    '#description' => t('Show the resources on a specific page. Resources are returned 25 items per page, and pagination starts with 1.'),
    '#states' => array(
      'visible' => array(
        ':input[name="resource"]' => array(
          array('value' => 'show'),
          array('value' => 'franchise'),
        ),
      ),
      'enabled' => array(
        ':input[name="resource"]' => array(
          array('value' => 'show'),
          array('value' => 'franchise'),
        ),
      ),
    ),
  );
  $form['parameters']['sort'] = array(
    '#type' => 'select',
    '#options' => array(
      '' => t('-None-'),
      'title_sortable' => t('Sortable Title (asc)'),
      '-title_sortable' => t('Sortable Title (desc)'),
      'title' => t('Title (asc)'),
      '-title' => t('Title (desc)'),
    ),
    '#title' => t('Sort'),
    '#description' => t('Sort the resources.'),
    '#states' => array(
      'visible' => array(
        ':input[name="resource"]' => array(
          array('value' => 'show'),
          array('value' => 'franchise'),
        ),
      ),
      'enabled' => array(
        ':input[name="resource"]' => array(
          array('value' => 'show'),
          array('value' => 'franchise'),
        ),
      ),
    ),
  );
  
  
  // Use an AJAX callback to display results without refreshing the page.
  $form['submit'] = array(
    '#type' => 'submit',
    '#ajax' => array(
      'callback' => 'pbs_media_manager_api_ui_settings_form_submit_ajax_callback',
      'wrapper' => 'box',
      'name' => 'submit1',
    ),
    '#value' => t('Get response'),
  );
  
  $default_markup = '';
  if (!empty($passed_value)) {
    $client = pbs_media_manager_get_api_client();
    $response = $client->get_request($passed_value);
    $default_markup = _pbs_media_manager_ui_prep_results($response, 'table');
  }
  
  // Results will be displayed here.
  $form['box'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="box">',
    '#suffix' => '</div>',
    '#markup' => $default_markup,
  );
  
  return $form;
}

/**
 * Test form select change handler for AJAX Callback.
 *
 * @param array $form
 *   Form array.
 * @param array $form_state
 *   Submitted form state.
 *
 * @return array
 *   Returns a response array.
 */
function pbs_media_manager_api_ui_resource_select_change_ajax_callback(array $form, array &$form_state) {
  
  $element = $form['parentResource'];
  $resource = $form_state['values']['resource'];
  
  // The parent resources options are determined by the resource type.
  $options = array();
  switch ($resource) {
    case 'asset':
      $options = array(
        'franchise' => t('Franchises'),
        'show' => t('Shows'),
        'season' => t('Seasons'),
        'episode' => t('Episodes'),
        'special' => t('Specials'),
      );
      break;
  
    case 'asset_legacy':
      // No parent options when Franchises are the resource.
      break;
  
  
    case 'collection':
      $options = array(
        'none' => t('None'),
        'show' => t('Shows'),
        'episode' => t('Episodes'),
        'special' => t('Specials'),
      );
      break;
    
    case 'episode':
      $options = array(
        'none' => t('None'),
        'season' => t('Seasons'),
        'collection' => t('Collections'),
      );
      break;
    
    case 'franchise':
      // No parent options when Franchises are the resource.
      break;
    
    case 'season':
      $options = array(
        'none' => t('None'),
        'collection' => t('Collections'),
        'show' => t('Shows'),
      );
      break;
    
    case 'show':
      $options = array(
        'none' => t('None'),
        'franchise' => t('Franchises'),
      );
      break;
    
    case 'special':
      $options = array(
        'none' => t('None'),
        'show' => t('Shows'),
        'collection' => t('Collections'),
      );
      break;
  }
  
  if (!empty($options)) {
    $element['#options'] = $options;
  
    return $element;
  }
  else {
    return NULL;
  }

}

/**
 * Test form submit handler for AJAX Callback.
 *
 * @param array $form
 *   Form array.
 * @param array $form_state
 *   Submitted form state.
 *
 * @return array
 *   Returns a response array.
 */
function pbs_media_manager_api_ui_settings_form_path_callback(array $form,
  array &$form_state) {
  
  $path = $form_state['values']['link_field'];
  
  $client = pbs_media_manager_get_api_client();
  $response = $client->get_request($path);
  
  $element = $form['box'];
  $element['#markup'] = _pbs_media_manager_ui_prep_results($response,
    $form['response_format']['#value']);
  return $element;
  
}

/**
 * Test form submit handler for AJAX Callback.
 *
 * @param array $form
 *   Form array.
 * @param array $form_state
 *   Submitted form state.
 *
 * @return array
 *   Returns a response array.
 */
function pbs_media_manager_api_ui_settings_form_submit_ajax_callback(array $form,
  array &$form_state) {
  
  $resource = $form['resource']['#value'];
  if ($resource == 'asset_legacy') {
    $resource = 'asset';
  }
  
  $resourceId = $form['id_or_slug']['#value'];
  $parentResource = $form['parentResource']['#value'] == 'none' ? '' :
    $form['parentResource']['#value'];
  $legacyID = $form['legacyID']['#value'];
  
  // Filters.
  $args = array();
  foreach ($form['parameters'] as $label => $element) {
    if ($label[0] != '#' && $label != 'fields') {
      if ($element['#value']) {
        $args[$label] = $element['#value'];
      }
    }
  }
  
  $response =
    pbs_media_manager_request($resource, $resourceId, $parentResource, $legacyID, $args, $cache_expire = 600);
  
  if (!$response) {
    $response =
      t('Request failed most likely due to invalid request. Check recent log entries for more detail');
  }
  
  $element = $form['box'];
  $element['#markup'] = _pbs_media_manager_ui_prep_results($response,
    $form['response_format']['#value']);
  return $element;
  
}

function _pbs_media_manager_ui_prep_results($response, $format) {
  
  switch ($format) {
    case 'dpm':
      dpm($response);
      return '<p>' . t('Request details above') . '</p>';
    
    case 'table':
      return theme('table', _pbs_media_manager_ui_results_table($response));
    
    case 'simple':
    default:
      return '<pre>' . print_r($response, TRUE) . '</pre>';
    
  }
  
}

function _pbs_media_manager_ui_results_table($raw_array) {
  $rows = array();
  $endpoint = variable_get('pbs_media_manager_endpoint');
  foreach ($raw_array as $key => $row) {
    if (is_array($row)) {
      $data = theme('table', _pbs_media_manager_ui_results_table($row));
    }
    else {
      $data = '<pre>' . $row . "</pre>";
      // If there is an API link, create button for it.
      if (strpos($row, $endpoint) !== FALSE) {
        $path = str_replace($endpoint, '', $row);
        $data .= l(t('Make API Call'),
          PBS_MEDIA_MANAGER_API_UI_TEST_URL . $path);
      }
    }
    $rows[] = array(
      'data' => array(
        '0' => array(
          'data' => array(
            '#type' => 'markup',
            '#markup' => $key,
          ),
        ),
        '1' => array(
          'data' => array(
            '#type' => 'markup',
            '#markup' => $data,
          ),
        ),
      ),
    );
  }
  
  $table = array(
    'header' => array(),
    'rows' => $rows,
    'empty' => t('No results found'),
  );
  
  return $table;
}
