<?php

/**
 * @file
 * PBS Media Manager API Player.
 *
 * Creates a field type for PBS Medias, and adds a field formatter to display as
 * an embedded video player.
 */


 define('PBS_MEDIA_MANAGER_PLAYER_MIGRATION', 'admin/config/media/pbs_media_manager/cove_migration');

/**
 * Implements hook_menu().
 */
function pbs_media_manager_player_menu() {

  $items = array();

  $items['admin/config/media/pbs_media_manager/default'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[PBS_MEDIA_MANAGER_PLAYER_MIGRATION] = array(
    'title' => 'Migrate Cove Player fields',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pbs_media_manager_player_migration_form'),
    'access arguments' => array('administer pbs_media_manager'),
    'file' => 'pbs_media_manager_player.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;

}

/**
 * Implements hook_field_info().
 */
function pbs_media_manager_player_field_info() {
  $return = array(
    'pbs_video' => array(
      'label' => t('PBS Media'),
      'description' => t('Stores a video accessible through the PBS Media Manager API.'),
      'default_widget' => 'pbs_media_url',
      'default_formatter' => 'pbs_media_manager_player_formatter',
    ),
  );

  return $return;
}

/**
 * Implements hook_field_validate().
 *
 * @see pbs_media_manager_player_field_widget_error()
 */
function pbs_media_manager_player_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['url'])) {
      // TODO: regex to to validate ID structure.
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function pbs_media_manager_player_field_is_empty($item, $field) {
  return empty($item['url']);
}


/**
 * Implements hook_field_widget_error().
 */
function pbs_media_manager_player_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'pbs_media_manager_player_invalid':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Implements hook_field_widget_form().
 *
 */
function pbs_media_manager_player_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  
  switch ($instance['widget']['type']) {
    
    case 'pbs_media_url' :
      $element['url'] = array(
        '#type' => 'textfield',
        '#title' => t('Video URL'),
        '#default_value' => isset($items[$delta]['url']) ?
          $items[$delta]['url'] : '',
        '#size' => 60,
        '#maxlength' => 255,
        '#required' => $element['#required'],
        '#element_validate' => array('pbs_media_manager_player_element_validate')
      );
      
      $element['api_data'] = array(
        '#type' => 'fieldset',
        '#title' => $element['#title'],
        '#tree' => TRUE,
      );
      
      $element['api_data']['slug'] = array(
        '#type' => 'textfield',
        '#title' => t('Slug'),
        '#default_value' => isset($items[$delta]['slug']) ?
          $items[$delta]['slug'] : '',
        '#size' => 60,
        '#maxlength' => 256,
        '#disabled' => TRUE,
      );
      
      $element['api_data']['asset_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Asset ID'),
        '#default_value' => isset($items[$delta]['asset_id']) ?
          $items[$delta]['asset_id'] : '',
        '#size' => 60,
        '#maxlength' => 256,
        '#disabled' => TRUE,
      );
      
      $element['api_data']['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Asset Title'),
        '#default_value' => isset($items[$delta]['title']) ?
          $items[$delta]['title'] : '',
        '#size' => 60,
        '#maxlength' => 256,
        '#disabled' => TRUE,
      );
      
      $element['api_data']['description'] = array(
        '#type' => 'textarea',
        '#title' => t('Description'),
        '#default_value' => isset($items[$delta]['description']) ?
          $items[$delta]['description'] : '',
        '#disabled' => TRUE,
      );
      
      $element['api_data']['premiere_date'] = array(
        '#type' => 'date',
        '#title' => t('Premiere Date'),
        '#default_value' => isset($items[$delta]['premiere_date']) ?
          date_parse($items[$delta]['premiere_date']) : '',
        '#disabled' => TRUE,
      );
      
      $element['api_data']['encore_date'] = array(
        '#type' => 'date',
        '#title' => t('Encore Date'),
        '#default_value' => isset($items[$delta]['encore_date']) ?
          date_parse($items[$delta]['encore_date']) : '',
        '#disabled' => TRUE,
      );
      
      break;
    
    
  }
  
  return $element;
}



/**
 * Implements hook_field_formatter_info().
 */
function pbs_media_manager_player_field_formatter_info() {
  return array(
    'pbs_media_manager_player_formatter' => array(
      'label' => t('PBS Media Player'),
      'field types' => array('pbs_video'),
    ),
  );
}


/**
 * Implements hook_field_formatter_view().
 */
function pbs_media_manager_player_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();


  foreach ($items as $delta => $item) {
    $asset_id = $item['asset_id'];
  }
  if (isset($asset_id)) {

    $resource = 'asset';
    $resourceID = $asset_id;

    // Request the video object from PBS.
    $response = pbs_media_manager_request($resource, $resourceID);

    // If our API key allows, use the PBS partner player.
    if (isset($response['data']['attributes']['player_code'])) {
      // API responses from PBS are probably safe, but we sanitize anyway. Since
      // the embed code is an iframe, and there is no way to know that
      // any specific text format is available and configured to allow
      // iframes, filter_xss() is the only way to do it.
      $player = filter_xss($response['data']['attributes']['player_code'],
        array('iframe'));
      if (isset($player)) {
        // Assign it to the #markup of the element.
        $element[0]['#markup'] = '<br clear="all" /><div class="partner-player"><div>' . $player . '</div></div>';
        $element[0]['#attached'] = array(
          'css' => array(drupal_get_path('module', 'pbs_media_manager_player') . '/pbs_media_manager_player.css'),
        );
      }
      // If we can't access the partner player, we must use the viral player
      // instead. We can't get the viral player embed code through the API, but
      // we can create it ourselves using the COVE video ID.
    }
    else {
      // TODO: This doesn't work anymore.
      //$player = '<iframe width="800" height="450" src="http://player.pbs.org/viralplayer/' . check_plain($object_id) . '" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" seamless></iframe>';
      // Assign it to the #markup of the element.
      //$element[0]['#markup'] = '<br clear="all" /><div class="viral-player"><div>'
                               //. $player . '</div></div>';
    }
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function pbs_media_manager_player_field_widget_info() {
  return array(
    'pbs_media_url' => array(
      'label' => t('PBS Video URL'),
      'field types' => array('pbs_video'),
    ),
  );
}


/**
 * Validate function for pbs_media_manager_player_field_widget_form().
 *
 * Remove any whitespace from the input value and make sure what's left is a
 * positive integer and is a valid COVE object ID.
 */
function pbs_media_manager_player_element_validate($element, &$form_state) {
  
  // set the resource
  $resource = 'asset';
  
  // sanitize the URL
  $url = check_plain(trim($element['#value']));
  
  // get the field
  $field = $element['#parents'][0];
  
  // if the value hasn't changed, we set the asset id as the resourceID
  if ($element['#default_value'] == $element['#value']) {
    
    $resourceID =
      $form_state['values'][$field][LANGUAGE_NONE][0]['api_data']['asset_id'];
    
    // If the slug has changed, we'll need to update the URL anyway.
    $old_slug = $form_state['values'][$field][LANGUAGE_NONE][0]['api_data']['slug'];
  
  } else {
  
    if (!empty($url)) {
      // find the URL path
      $parsed_url = parse_url($url);
      // if there is is no path, throw an error
      if (!isset($parsed_url['path']) || empty($parsed_url['path'])) {
        form_error($element,
          t('%name is not a valid URL.', array('%name' => $element['#title'])));
      }
      // otherwise, get the slug and set it as the resourceID
      else {
        $slug = basename($parsed_url['path']);
        $resourceID = $slug;
      }
    }
  }
  
  if (isset($resourceID)) {
    $response = pbs_media_manager_request($resource, $resourceID);
  
    // If there's no ID in the response, this fails.
    if (!isset($response['data']['id'])) {
      form_error($element, t('%name is not a valid PBS Video URL.', array('%name' => $element['#title'])));
    }
    else {
      // Otherwise, sanitize the results
      $asset_id = check_plain($response['data']['id']);
      $slug = check_plain($response['data']['attributes']['slug']);
      $title = check_plain($response['data']['attributes']['title']);
      $description = check_plain($response['data']['attributes']['description_short']);
      $premiere_date = check_plain($response['data']['attributes']['premiered_on']);
      $encore_date = check_plain($response['data']['attributes']['encored_on']);
    
      $values = array(
        'slug' => $slug,
        'asset_id' => $asset_id,
        'title' => $title,
        'description' => $description,
        'premiere_date' => $premiere_date,
        'encore_date' => $encore_date,
      );
    
      if (isset($old_slug) && $slug != $old_slug) {
        $url = str_replace($old_slug, $slug, $url);
      }
    
      // insert the values into the form
      $form[$field]['#parents'] = array($field);
      form_set_value($form[$field], array(LANGUAGE_NONE => array(0 => $values)), $form_state);
      form_set_value($element, $url, $form_state);
    }
  }
}


/**
 * Helper function to find old cove fields.
 */
function _pbs_media_manager_player_find_cove_fields() {
  // Load the fields using Cove Player module.
  $include_additional = array(
    'include_inactive' => TRUE,
  );
  $params = array(
    'module' => 'cove_api_player',
    'type' => 'pbs_video',
  );
  
  return field_read_fields($params, $include_additional);

}
