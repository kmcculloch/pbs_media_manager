<?php

/**
 * @file
 * PBS Media Manager API Player.
 *
 * Creates a field type for PBS Medias, and adds a field formatter to display as
 * an embedded video player.
 */

/**
 * Implements hook_menu().
 */
function pbs_media_manager_player_menu() {

  $items = array();

  $items['admin/config/media/pbs_media_manager/default'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}

/**
 * Implements hook_field_info().
 */
function pbs_media_manager_player_field_info() {
  $return = array(
    'pbs_media' => array(
      'label' => t('PBS Media'),
      'description' => t('Stores a video accessible through the PBS Media Manager API.'),
      'default_widget' => 'pbs_media_url',
      'default_formatter' => 'pbs_media_manager_player_formatter',
    ),
  );

  return $return;
}

/**
 * Implements hook_field_widget_info().
 */
function pbs_media_manager_player_field_widget_info() {
  return array(
    'pbs_media_url' => array(
      'label' => t('PBS Video URL'),
      'field types' => array('pbs_media'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function pbs_media_manager_player_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  
  switch ($instance['widget']['type']) {

    case 'pbs_media_url':
      $element['url'] = array(
        '#type' => 'textfield',
        '#title' => t('Video URL'),
        '#default_value' => isset($items[$delta]['url']) ? $items[$delta]['url'] : '',
        '#size' => 60,
        '#maxlength' => 255,
        '#required' => $element['#required'],
      );

      $element['original_url'] = array(
        '#type' => 'hidden',
        '#value' => isset($items[$delta]['url']) ? $items[$delta]['url'] : '',
      );

      $element['api_data'] = array(
        '#type' => 'fieldset',
        '#title' => t('Video Information'),
        '#tree' => TRUE,
      );

      $element['api_data']['slug'] = array(
        '#type' => 'textfield',
        '#title' => t('Slug'),
        '#default_value' => isset($items[$delta]['slug']) ? $items[$delta]['slug'] : '',
        '#size' => 60,
        '#maxlength' => 256,
        '#disabled' => TRUE,
      );

      $element['api_data']['asset_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Asset ID'),
        '#default_value' => isset($items[$delta]['asset_id']) ? $items[$delta]['asset_id'] : '',
        '#size' => 60,
        '#maxlength' => 256,
        '#disabled' => TRUE,
      );

      $element['api_data']['legacy_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Legacy ID'),
        '#default_value' => isset($items[$delta]['legacy_id']) ? $items[$delta]['legacy_id'] : '',
        '#size' => 60,
        '#maxlength' => 256,
        '#disabled' => TRUE,
      );

      $element['api_data']['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Asset Title'),
        '#default_value' => isset($items[$delta]['title']) ? $items[$delta]['title'] : '',
        '#size' => 60,
        '#maxlength' => 256,
        '#disabled' => TRUE,
      );

      $element['api_data']['description'] = array(
        '#type' => 'textarea',
        '#title' => t('Description'),
        '#default_value' => isset($items[$delta]['description']) ? $items[$delta]['description'] : '',
        '#disabled' => TRUE,
      );

      $element['api_data']['premiere_date'] = array(
        '#type' => 'date',
        '#title' => t('Premiere Date'),
        '#default_value' => isset($items[$delta]['premiere_date']) ? date_parse($items[$delta]['premiere_date']) : '',
        '#disabled' => TRUE,
      );

      $element['api_data']['encore_date'] = array(
        '#type' => 'date',
        '#title' => t('Encore Date'),
        '#default_value' => isset($items[$delta]['encore_date']) ? date_parse($items[$delta]['encore_date']) : '',
        '#disabled' => TRUE,
      );

      break;

  }

  return $element;
}

/**
 * Implements hook_field_validate().
 *
 * @see pbs_media_manager_player_field_widget_error()
 */
function pbs_media_manager_player_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

  foreach ($items as $delta => $item) {
    // Sanitize the URL.
    $url = check_plain(trim($item['url']));

    // Check to see if the URL is valid and absolute.
    if (!empty($url) && !valid_url($url, $absolute = TRUE)) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'pbs_media_manager_player_invalid_url',
        'message' => t('%name: %url is not a valid URL.', array('%name' => $instance['label'], '%url' => $url)),
      );
    }
    else {
      $parsed_url = parse_url($url);
      if (isset($parsed_url['path']) && !empty($parsed_url['path'])) {

        $path_array = explode('/', $parsed_url['path']);

        // Paths should have the structure /video/[slug].
        if (count($path_array < 3) && $path_array[1] != 'video') {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'pbs_media_manager_player_malformed_url',
            'message' => t('%name: %url is not a valid PBS Video URL.', array('%name' => $instance['label'], '%url' => $url)),
          );
        }
      }
    }

  }
}

/**
 * Implements hook_field_widget_error().
 */
function pbs_media_manager_player_field_widget_error($element, $error, $form, &$form_state) {

  switch ($error['error']) {
    case 'pbs_media_manager_player_invalid_url':
      form_error($element, $error['message']);
      break;

    case 'pbs_media_manager_player_malformed_url':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Implements hook_field_presave().
 *
 * Request the asset info from the API and save relevant data to the field.
 */
function pbs_media_manager_player_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {

  // Set the resource.
  $resource = 'asset';

  foreach ($items as $delta => $item) {

    // Sanitize the URL.
    $url = check_plain(trim($item['url']));
    $original_url = isset($item['original_url']) ? check_plain(trim($item['original_url'])) : '';

    // If this is an update but the URL hasn't changed, we'll want to query
    // the asset and check that the slug hasn't changed.
    if ($url == $original_url && !empty($item['api_data']['asset_id']) &&
      !empty($item['api_data']['slug'])) {
      $resourceID = $item['api_data']['asset_id'];
      $orig_slug = $item['api_data']['slug'];
    }
    // Otherwise, we need to parse the URL and extract the slug.
    else {
      // Parse the URL to get the path.
      $parsed_url = parse_url($url);

      // Find the slug.
      $slug = basename($parsed_url['path']);
      $resourceID = $slug;
    }

    $response = pbs_media_manager_request($resource, $resourceID);

    // If there's no ID in the response, this fails.
    if (!isset($response['data']['id'])) {
      // There's no way to send this back to the validator so display a message.
      $node = $entity->title;
      if (isset($entity->path)) {
        $node = l($node, $entity->path['source']);
      }
      drupal_set_message(t(
        '%name: %url on !node did not return a valid response from the PBS Media Manager API. You may want to check that the URL is correct and the video is published.',
        array(
          '%name' => $instance['label'],
          '%url' => $url,
          '!node' => $node,
        )), 'warning');
    }

    // Otherwise, save the results to the field.
    else {

      // Sanitize the results.
      $asset_id = check_plain($response['data']['id']);
      $legacy_id = check_plain($response['data']['attributes']['legacy_tp_media_id']);
      $slug = check_plain($response['data']['attributes']['slug']);
      $title = check_plain($response['data']['attributes']['title']);
      $description = check_plain($response['data']['attributes']['description_short']);
      $premiere_date = check_plain($response['data']['attributes']['premiered_on']);
      $encore_date = check_plain($response['data']['attributes']['encored_on']);

      // Set the values. This must be flat, without the 'api_data' sub-array.
      $items[$delta]['asset_id'] = $asset_id;
      $items[$delta]['legacy_id'] = $legacy_id;
      $items[$delta]['slug'] = $slug;
      $items[$delta]['title'] = $title;
      $items[$delta]['description'] = $description;
      $items[$delta]['premiere_date'] = $premiere_date;
      $items[$delta]['encore_date'] = $encore_date;

      // Remove the 'api_data' sub-array as it is no longer needed.
      unset($items[$delta]['api_data']);

      // If this is an update with the same URL, and the slug has changed, we
      // need to update the URL to match.
      if (isset($orig_slug) && $orig_slug != $slug) {
        $updated_url = str_replace($orig_slug, $slug, $url);
        $items[$delta]['url'] = $updated_url;
      }

    }
  }

}

/**
 * Implements hook_field_is_empty().
 */
function pbs_media_manager_player_field_is_empty($item, $field) {
  return empty($item['url']);
}

/**
 * Implements hook_field_formatter_info().
 */
function pbs_media_manager_player_field_formatter_info() {
  return array(
    'pbs_media_manager_player_formatter' => array(
      'label' => t('PBS Media Player'),
      'field types' => array('pbs_media'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function pbs_media_manager_player_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  foreach ($items as $delta => $item) {
    $asset_id = $item['asset_id'];

    if (isset($asset_id)) {

      $resource = 'asset';
      $resourceID = $asset_id;

      // Request the video object from PBS.
      $response = pbs_media_manager_request($resource, $resourceID);

      // Use the provided PBS partner player.
      if (isset($response['data']['attributes']['player_code'])) {

        // API responses from PBS are probably safe, but we sanitize anyway.
        $player = filter_xss($response['data']['attributes']['player_code'],
          array('iframe'));
        $class = 'partner-player';
      }
      // If we can't access the partner player, we must construct it
      // ourselves using the legacy_tp_media_id field. Access to this field
      // can be requested by filing a ticket with PBS Digital Support.
      elseif (isset($response['data']['attributes']['legacy_tp_media_id'])) {

        $object_id = $response['data']['attributes']['legacy_tp_media_id'];
        $player = '<iframe src="http://player.pbs.org/widget/partnerplayer/' .
          check_plain($object_id) . '" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" seamless></iframe>';
        $class = 'partner-player';
      }

      // If we don't have access to the legacy_tp_media_id field, diplay an
      // error.
      else {
        $player = t('The video cannot be displayed.');
        $class = 'partner-player player-error';
      }

      // Assign the player or error message to the #markup of the element.
      if (isset($player)) {
        $element[$delta]['#markup'] =
          '<br clear="all" /><div class="' . $class . '"><div>' . $player .
          '</div></div>';
        $element[$delta]['#attached'] = array(
          'css' => array(
            drupal_get_path('module', 'pbs_media_manager_player') .
            '/pbs_media_manager_player.css',
          ),
        );
      }
    }
  }
  return $element;
}
