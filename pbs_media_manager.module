<?php

/**
 * @file
 * Hooks for integration w/ PBS Media Manager API.
 */

define('PBS_MEDIA_MANAGER_SETTING_URL', 'admin/config/media/pbs_media_manager');

/**
 * Implements hook_permission().
 */
function pbs_media_manager_permission() {
  return array(
    'administer pbs_media_manager' => array(
      'title' => t('Administer Media Manager settings'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function pbs_media_manager_menu() {
  $items = array();

  $items[PBS_MEDIA_MANAGER_SETTING_URL] = array(
    'title' => 'PBS Media Manager',
    'description' => 'Manage settings for the PBS Media Manager API',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pbs_media_manager_admin_site_settings'),
    'access arguments' => array('administer pbs_media_manager'),
    'file' => 'pbs_media_manager.admin.inc',
  );

  return $items;
}

/**
 * Gets configuration settings.
 *
 * @return array
 *   Associative array of config settings (api_key, api_secret, endpoint).
 */
function pbs_media_manager_get_config() {
  $config = &drupal_static(__FUNCTION__);

  if (!isset($config)) {
    $config = array(
      'api_key' => variable_get('pbs_media_manager_key'),
      'api_secret' => variable_get('pbs_media_manager_secret'),
      'endpoint' => variable_get('pbs_media_manager_endpoint'),
    );
  }

  return $config;
}

/**
 * Return a new API Client object.
 *
 * @param string $api_key
 *   API Key, if not provided pulled from settings.
 * @param string $api_secret
 *   API Secret, if not provided pulled from settings.
 * @param string $endpoint
 *   API base endpoint, if not provided pulled from settings.
 *
 * @return \PBS_Media_Manager_API_Client
 *   An API client object to use for requests.
 */
function pbs_media_manager_get_api_client($api_key = '', $api_secret = '', $endpoint = '') {
  $config = pbs_media_manager_get_config();
  $api_key = (empty($api_key)) ? $config['api_key'] : $api_key;
  $api_secret = (empty($api_secret)) ? $config['api_secret'] : $api_secret;
  $endpoint = (empty($endpoint)) ? $config['endpoint'] : $endpoint;

  if (empty($endpoint) || empty($api_key) || empty($api_secret)) {
    watchdog('pbs_media_manager', 'PBS Media Manager API not configured.', array(), WATCHDOG_ERROR, PBS_MEDIA_MANAGER_SETTING_URL);
  }

  module_load_include('php', 'pbs_media_manager', 'includes/PBSMediaManagerAPIClient');

  return new PBS_Media_Manager_API_Client($api_key, $api_secret, $endpoint);
}

/**
 * Make a request to the PBS Core Data Model API.
 *
 * @param string $resource
 *   The resource type to search and return.
 * @param string $resourceID
 *   The Resource ID or slug to run filters and searches.
 * @param string $parentResource
 *   The parent resource to search for a resource within.
 * @param array $args
 *   Associative array of arguments to add as the query string in the URL.
 * @param int $cache_expire
 *   The number of seconds from now to expire the cache for this request, or 0
 *   to not cache request.
 * @param string $api_key
 *   The "API ID" from PBS (will get from config if not set).
 * @param string $api_secret
 *   The "API Secret" from PBS (will get from config if not set).
 * @param string $endpoint
 *   The base API Endpoint to use to get data from PBS.
 *
 * @return object|bool
 *   Object Response data from the request
 */
function pbs_media_manager_request($resource, $resourceID = '', $parentResource = '', $legacyID = '', array $args = array(), $cache_expire = 600, $api_key = NULL, $api_secret = NULL, $endpoint = '') {

  // We do this here to standardize cache key.
  ksort($args, SORT_STRING);

  if ($cache_expire) {
    $keyable = array_merge(array($resource, $parentResource, $resourceID), $args);
    $cache_key = 'pbs_media_manager:' . md5(implode('-', $keyable));
    $cache = cache_get($cache_key);
  }

  // Return cache if available and not expired.
  if (!empty($cache->data) && time() < $cache->expire) {
    return $cache->data;
  }

  $client = pbs_media_manager_get_api_client($api_key, $api_secret, $endpoint);

  // If there is a legacy ID, we need to use a special function.
  if ($legacyID != '') {
    $function = 'get_asset_by_tp_media_id';
    $resourceID = $legacyID;
  }
  // If there is a parent resource we are getting a list of child elements from
  // a particular resource.
  elseif ($parentResource != '') {
    $function =
    'get_' . strtolower($parentResource) . '_' . strtolower($resource) . 's';
  }
  // Changelog is a special case.
  elseif ($resource == 'changelog') {
    $function = 'get_changelog';
    if (!empty($args)) {
      $resourceID = $args;
    }
  }
  else {
    $function = 'get_' . strtolower($resource);

    // If we're getting a list the function name is plural.
    if (!$resourceID) {
      $function .= 's';
    }
  }

  return $client->{$function}($resourceID);
}

/**
 * Test to see if the current settings allow a connection to the API.
 *
 * @return bool
 *   Returns true if the API is able to get the station list, false otherwise.
 */
function pbs_media_manager_api_connection_test() {
  $client = pbs_media_manager_get_api_client();
  $response = $client->get_list_data('/shows', array('page' => 1), TRUE);

  if (isset($response['jsonapi'])) {
    return TRUE;
  }

  if (isset($response['errors'])) {
    switch ($response['errors']['info']['http_code']) {
      case 401:
      case 403:
        $message = "PBS Media Manager rejected credenitals.";
        break;

      case 404:
        $message = "PBS Media Manager rejected test location.";
        break;

      case 0:
        $message = "Unable to reach PBS Media Manager API, no response from remote.";
        break;

      default:
        $message = "Unable to reach PBS Media Manager with provided credenitals.";
    }

  }
  watchdog('pbs_media_manager', $message, array(), WATCHDOG_NOTICE, PBS_MEDIA_MANAGER_SETTING_URL);

}
